/// <reference types="./types/expect-webdriverio.d.ts"/>

// type WdioElementLike = WebdriverIO.Element | ChainablePromiseElement

// TODO dprevost - check if we need to add ChainablePromiseElement and or ChainablePromiseArrayElement
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type PromiseLikeType = Promise<any>

declare namespace jest {

    interface Matchers<R, T> extends WdioMatchers<R, T>{

        /**
         * Below are overloaded Jest's matchers not part of `expect` but of `jest-snapshot`.
         * We need to define them below so that they are correctly typed overloaded
         * @see https://github.com/jestjs/jest/blob/73dbef5d2d3195a1e55fb254c54cce70d3036252/packages/jest-snapshot/src/types.ts#L37
         */

        /**
         * snapshot matcher
         * @param label optional snapshot label
         */
        toMatchSnapshot(label?: string): Promise<R>;

        // TODO - this is not working as expected, need to investigate
        /**
         * snapshot matcher
         * @param label optional snapshot label
         */
        // toMatchSnapshot: T extends WdioElementLike ? (label: string) => Promise<R> : (hint?: string) => R;

        /**
         * inline snapshot matcher
         * @param snapshot snapshot string (autogenerated if not specified)
         * @param label optional snapshot label
         */
        toMatchInlineSnapshot(snapshot?: string, label?: string): Promise<R>
    }

    type MatcherAndInverse<R, T> = Matchers<R, T> & AndNot<Matchers<R, T>>
    interface Expect extends WdioMatchers {

        /**
         * Below are the custom Expect of WebdriverIO.
         * We need to define them below so that they are correctly typed. We cannot just extend WdioCustomExpect
         */

        /**
         * Creates a soft assertion wrapper around standard expect
         * Soft assertions record failures but don't throw errors immediately
         * All failures are collected and reported at the end of the test
         */
        soft<T = unknown>(actual: T): T extends PromiseLikeType ? MatcherAndInverse<Promise<void>, T> : MatcherAndInverse<void, T>

        /**
         * Get all current soft assertion failures
         */
        getSoftFailures(testId?: string): SoftFailure[]

        /**
         * Manually assert all soft failures (throws an error if any failures exist)
         */
        assertSoftFailures(testId?: string): void

        /**
         * Clear all current soft assertion failures
         */
        clearSoftFailures(testId?: string): void
    }

    interface InverseAsymmetricMatchers extends Expect {}
}